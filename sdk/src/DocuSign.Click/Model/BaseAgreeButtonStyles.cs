/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// BaseAgreeButtonStyles
    /// </summary>
    [DataContract]
    public partial class BaseAgreeButtonStyles :  IEquatable<BaseAgreeButtonStyles>, IValidatableObject
    {
        public BaseAgreeButtonStyles()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseAgreeButtonStyles" /> class.
        /// </summary>
        /// <param name="BackgroundColor">Control the background color of the element..</param>
        /// <param name="Border">Control the border of the element..</param>
        /// <param name="BorderColor">Control the border color of the element..</param>
        /// <param name="BorderRadius">Control the border radius of the element..</param>
        /// <param name="BorderStyle">Control the border style of the element..</param>
        /// <param name="BorderWidth">Control the border width of the element..</param>
        /// <param name="BoxShadow">Control the display of the box shadow of the agree button..</param>
        /// <param name="Color">Control the fore-ground color of the element..</param>
        /// <param name="FontFamily">Control the font family of the text..</param>
        /// <param name="FontSize">Control the font size of the text..</param>
        /// <param name="FontStyle">Control the font style of the text..</param>
        /// <param name="FontWeight">Control the font weight of the text..</param>
        /// <param name="Height">Control the height of the agree button..</param>
        /// <param name="Margin">Control the margin of the element..</param>
        /// <param name="Opacity">Control the opacity of the element.</param>
        /// <param name="Outline">Control the outline of the element.</param>
        /// <param name="OutlineOffset">Conrol the outline offset of the element.</param>
        /// <param name="Padding">Control the padding of the element..</param>
        /// <param name="Width">Control the width of the agree button..</param>
        public BaseAgreeButtonStyles(string BackgroundColor = default(string), string Border = default(string), string BorderColor = default(string), string BorderRadius = default(string), string BorderStyle = default(string), string BorderWidth = default(string), string BoxShadow = default(string), string Color = default(string), string FontFamily = default(string), string FontSize = default(string), string FontStyle = default(string), Object FontWeight = default(Object), string Height = default(string), string Margin = default(string), string Opacity = default(string), string Outline = default(string), string OutlineOffset = default(string), string Padding = default(string), string Width = default(string))
        {
            this.BackgroundColor = BackgroundColor;
            this.Border = Border;
            this.BorderColor = BorderColor;
            this.BorderRadius = BorderRadius;
            this.BorderStyle = BorderStyle;
            this.BorderWidth = BorderWidth;
            this.BoxShadow = BoxShadow;
            this.Color = Color;
            this.FontFamily = FontFamily;
            this.FontSize = FontSize;
            this.FontStyle = FontStyle;
            this.FontWeight = FontWeight;
            this.Height = Height;
            this.Margin = Margin;
            this.Opacity = Opacity;
            this.Outline = Outline;
            this.OutlineOffset = OutlineOffset;
            this.Padding = Padding;
            this.Width = Width;
        }
        
        /// <summary>
        /// Control the background color of the element.
        /// </summary>
        /// <value>Control the background color of the element.</value>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }
        /// <summary>
        /// Control the border of the element.
        /// </summary>
        /// <value>Control the border of the element.</value>
        [DataMember(Name="border", EmitDefaultValue=false)]
        public string Border { get; set; }
        /// <summary>
        /// Control the border color of the element.
        /// </summary>
        /// <value>Control the border color of the element.</value>
        [DataMember(Name="borderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }
        /// <summary>
        /// Control the border radius of the element.
        /// </summary>
        /// <value>Control the border radius of the element.</value>
        [DataMember(Name="borderRadius", EmitDefaultValue=false)]
        public string BorderRadius { get; set; }
        /// <summary>
        /// Control the border style of the element.
        /// </summary>
        /// <value>Control the border style of the element.</value>
        [DataMember(Name="borderStyle", EmitDefaultValue=false)]
        public string BorderStyle { get; set; }
        /// <summary>
        /// Control the border width of the element.
        /// </summary>
        /// <value>Control the border width of the element.</value>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public string BorderWidth { get; set; }
        /// <summary>
        /// Control the display of the box shadow of the agree button.
        /// </summary>
        /// <value>Control the display of the box shadow of the agree button.</value>
        [DataMember(Name="boxShadow", EmitDefaultValue=false)]
        public string BoxShadow { get; set; }
        /// <summary>
        /// Control the fore-ground color of the element.
        /// </summary>
        /// <value>Control the fore-ground color of the element.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }
        /// <summary>
        /// Control the font family of the text.
        /// </summary>
        /// <value>Control the font family of the text.</value>
        [DataMember(Name="fontFamily", EmitDefaultValue=false)]
        public string FontFamily { get; set; }
        /// <summary>
        /// Control the font size of the text.
        /// </summary>
        /// <value>Control the font size of the text.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }
        /// <summary>
        /// Control the font style of the text.
        /// </summary>
        /// <value>Control the font style of the text.</value>
        [DataMember(Name="fontStyle", EmitDefaultValue=false)]
        public string FontStyle { get; set; }
        /// <summary>
        /// Control the font weight of the text.
        /// </summary>
        /// <value>Control the font weight of the text.</value>
        [DataMember(Name="fontWeight", EmitDefaultValue=false)]
        public Object FontWeight { get; set; }
        /// <summary>
        /// Control the height of the agree button.
        /// </summary>
        /// <value>Control the height of the agree button.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }
        /// <summary>
        /// Control the margin of the element.
        /// </summary>
        /// <value>Control the margin of the element.</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }
        /// <summary>
        /// Control the opacity of the element
        /// </summary>
        /// <value>Control the opacity of the element</value>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public string Opacity { get; set; }
        /// <summary>
        /// Control the outline of the element
        /// </summary>
        /// <value>Control the outline of the element</value>
        [DataMember(Name="outline", EmitDefaultValue=false)]
        public string Outline { get; set; }
        /// <summary>
        /// Conrol the outline offset of the element
        /// </summary>
        /// <value>Conrol the outline offset of the element</value>
        [DataMember(Name="outlineOffset", EmitDefaultValue=false)]
        public string OutlineOffset { get; set; }
        /// <summary>
        /// Control the padding of the element.
        /// </summary>
        /// <value>Control the padding of the element.</value>
        [DataMember(Name="padding", EmitDefaultValue=false)]
        public string Padding { get; set; }
        /// <summary>
        /// Control the width of the agree button.
        /// </summary>
        /// <value>Control the width of the agree button.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseAgreeButtonStyles {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Border: ").Append(Border).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderRadius: ").Append(BorderRadius).Append("\n");
            sb.Append("  BorderStyle: ").Append(BorderStyle).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  BoxShadow: ").Append(BoxShadow).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FontStyle: ").Append(FontStyle).Append("\n");
            sb.Append("  FontWeight: ").Append(FontWeight).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  Outline: ").Append(Outline).Append("\n");
            sb.Append("  OutlineOffset: ").Append(OutlineOffset).Append("\n");
            sb.Append("  Padding: ").Append(Padding).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BaseAgreeButtonStyles);
        }

        /// <summary>
        /// Returns true if BaseAgreeButtonStyles instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseAgreeButtonStyles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseAgreeButtonStyles other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackgroundColor == other.BackgroundColor ||
                    this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    this.Border == other.Border ||
                    this.Border != null &&
                    this.Border.Equals(other.Border)
                ) && 
                (
                    this.BorderColor == other.BorderColor ||
                    this.BorderColor != null &&
                    this.BorderColor.Equals(other.BorderColor)
                ) && 
                (
                    this.BorderRadius == other.BorderRadius ||
                    this.BorderRadius != null &&
                    this.BorderRadius.Equals(other.BorderRadius)
                ) && 
                (
                    this.BorderStyle == other.BorderStyle ||
                    this.BorderStyle != null &&
                    this.BorderStyle.Equals(other.BorderStyle)
                ) && 
                (
                    this.BorderWidth == other.BorderWidth ||
                    this.BorderWidth != null &&
                    this.BorderWidth.Equals(other.BorderWidth)
                ) && 
                (
                    this.BoxShadow == other.BoxShadow ||
                    this.BoxShadow != null &&
                    this.BoxShadow.Equals(other.BoxShadow)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.FontFamily == other.FontFamily ||
                    this.FontFamily != null &&
                    this.FontFamily.Equals(other.FontFamily)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.FontStyle == other.FontStyle ||
                    this.FontStyle != null &&
                    this.FontStyle.Equals(other.FontStyle)
                ) && 
                (
                    this.FontWeight == other.FontWeight ||
                    this.FontWeight != null &&
                    this.FontWeight.Equals(other.FontWeight)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.Margin == other.Margin ||
                    this.Margin != null &&
                    this.Margin.Equals(other.Margin)
                ) && 
                (
                    this.Opacity == other.Opacity ||
                    this.Opacity != null &&
                    this.Opacity.Equals(other.Opacity)
                ) && 
                (
                    this.Outline == other.Outline ||
                    this.Outline != null &&
                    this.Outline.Equals(other.Outline)
                ) && 
                (
                    this.OutlineOffset == other.OutlineOffset ||
                    this.OutlineOffset != null &&
                    this.OutlineOffset.Equals(other.OutlineOffset)
                ) && 
                (
                    this.Padding == other.Padding ||
                    this.Padding != null &&
                    this.Padding.Equals(other.Padding)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackgroundColor != null)
                    hash = hash * 59 + this.BackgroundColor.GetHashCode();
                if (this.Border != null)
                    hash = hash * 59 + this.Border.GetHashCode();
                if (this.BorderColor != null)
                    hash = hash * 59 + this.BorderColor.GetHashCode();
                if (this.BorderRadius != null)
                    hash = hash * 59 + this.BorderRadius.GetHashCode();
                if (this.BorderStyle != null)
                    hash = hash * 59 + this.BorderStyle.GetHashCode();
                if (this.BorderWidth != null)
                    hash = hash * 59 + this.BorderWidth.GetHashCode();
                if (this.BoxShadow != null)
                    hash = hash * 59 + this.BoxShadow.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.FontFamily != null)
                    hash = hash * 59 + this.FontFamily.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.FontStyle != null)
                    hash = hash * 59 + this.FontStyle.GetHashCode();
                if (this.FontWeight != null)
                    hash = hash * 59 + this.FontWeight.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.Margin != null)
                    hash = hash * 59 + this.Margin.GetHashCode();
                if (this.Opacity != null)
                    hash = hash * 59 + this.Opacity.GetHashCode();
                if (this.Outline != null)
                    hash = hash * 59 + this.Outline.GetHashCode();
                if (this.OutlineOffset != null)
                    hash = hash * 59 + this.OutlineOffset.GetHashCode();
                if (this.Padding != null)
                    hash = hash * 59 + this.Padding.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
