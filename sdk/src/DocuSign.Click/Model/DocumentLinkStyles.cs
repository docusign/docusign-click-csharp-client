/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Control the display of the agreement statement.
    /// </summary>
    [DataContract]
    public partial class DocumentLinkStyles :  IEquatable<DocumentLinkStyles>, IValidatableObject
    {
        public DocumentLinkStyles()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentLinkStyles" /> class.
        /// </summary>
        /// <param name="Focus">Focus.</param>
        /// <param name="Hover">Hover.</param>
        /// <param name="Border">Control the border of the element..</param>
        /// <param name="Color">Control the fore-ground color of the element..</param>
        /// <param name="FontFamily">Control the font family of the text..</param>
        /// <param name="FontSize">Control the font size of the text..</param>
        /// <param name="FontStyle">Control the font style of the text..</param>
        /// <param name="FontWeight">Control the font weight of the text..</param>
        /// <param name="Margin">Control the margin of the element..</param>
        /// <param name="Padding">Control the padding of the element..</param>
        /// <param name="TextDecoration">Control the underline and other styles of the text..</param>
        public DocumentLinkStyles(DocumentLinkStylesFocus Focus = default(DocumentLinkStylesFocus), DocumentLinkStylesFocus Hover = default(DocumentLinkStylesFocus), string Border = default(string), string Color = default(string), string FontFamily = default(string), string FontSize = default(string), string FontStyle = default(string), Object FontWeight = default(Object), string Margin = default(string), string Padding = default(string), string TextDecoration = default(string))
        {
            this.Focus = Focus;
            this.Hover = Hover;
            this.Border = Border;
            this.Color = Color;
            this.FontFamily = FontFamily;
            this.FontSize = FontSize;
            this.FontStyle = FontStyle;
            this.FontWeight = FontWeight;
            this.Margin = Margin;
            this.Padding = Padding;
            this.TextDecoration = TextDecoration;
        }
        
        /// <summary>
        /// Gets or Sets Focus
        /// </summary>
        [DataMember(Name=":focus", EmitDefaultValue=false)]
        public DocumentLinkStylesFocus Focus { get; set; }
        /// <summary>
        /// Gets or Sets Hover
        /// </summary>
        [DataMember(Name=":hover", EmitDefaultValue=false)]
        public DocumentLinkStylesFocus Hover { get; set; }
        /// <summary>
        /// Control the border of the element.
        /// </summary>
        /// <value>Control the border of the element.</value>
        [DataMember(Name="border", EmitDefaultValue=false)]
        public string Border { get; set; }
        /// <summary>
        /// Control the fore-ground color of the element.
        /// </summary>
        /// <value>Control the fore-ground color of the element.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }
        /// <summary>
        /// Control the font family of the text.
        /// </summary>
        /// <value>Control the font family of the text.</value>
        [DataMember(Name="fontFamily", EmitDefaultValue=false)]
        public string FontFamily { get; set; }
        /// <summary>
        /// Control the font size of the text.
        /// </summary>
        /// <value>Control the font size of the text.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }
        /// <summary>
        /// Control the font style of the text.
        /// </summary>
        /// <value>Control the font style of the text.</value>
        [DataMember(Name="fontStyle", EmitDefaultValue=false)]
        public string FontStyle { get; set; }
        /// <summary>
        /// Control the font weight of the text.
        /// </summary>
        /// <value>Control the font weight of the text.</value>
        [DataMember(Name="fontWeight", EmitDefaultValue=false)]
        public Object FontWeight { get; set; }
        /// <summary>
        /// Control the margin of the element.
        /// </summary>
        /// <value>Control the margin of the element.</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }
        /// <summary>
        /// Control the padding of the element.
        /// </summary>
        /// <value>Control the padding of the element.</value>
        [DataMember(Name="padding", EmitDefaultValue=false)]
        public string Padding { get; set; }
        /// <summary>
        /// Control the underline and other styles of the text.
        /// </summary>
        /// <value>Control the underline and other styles of the text.</value>
        [DataMember(Name="textDecoration", EmitDefaultValue=false)]
        public string TextDecoration { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentLinkStyles {\n");
            sb.Append("  Focus: ").Append(Focus).Append("\n");
            sb.Append("  Hover: ").Append(Hover).Append("\n");
            sb.Append("  Border: ").Append(Border).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FontStyle: ").Append(FontStyle).Append("\n");
            sb.Append("  FontWeight: ").Append(FontWeight).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Padding: ").Append(Padding).Append("\n");
            sb.Append("  TextDecoration: ").Append(TextDecoration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocumentLinkStyles);
        }

        /// <summary>
        /// Returns true if DocumentLinkStyles instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentLinkStyles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentLinkStyles other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Focus == other.Focus ||
                    this.Focus != null &&
                    this.Focus.Equals(other.Focus)
                ) && 
                (
                    this.Hover == other.Hover ||
                    this.Hover != null &&
                    this.Hover.Equals(other.Hover)
                ) && 
                (
                    this.Border == other.Border ||
                    this.Border != null &&
                    this.Border.Equals(other.Border)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.FontFamily == other.FontFamily ||
                    this.FontFamily != null &&
                    this.FontFamily.Equals(other.FontFamily)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.FontStyle == other.FontStyle ||
                    this.FontStyle != null &&
                    this.FontStyle.Equals(other.FontStyle)
                ) && 
                (
                    this.FontWeight == other.FontWeight ||
                    this.FontWeight != null &&
                    this.FontWeight.Equals(other.FontWeight)
                ) && 
                (
                    this.Margin == other.Margin ||
                    this.Margin != null &&
                    this.Margin.Equals(other.Margin)
                ) && 
                (
                    this.Padding == other.Padding ||
                    this.Padding != null &&
                    this.Padding.Equals(other.Padding)
                ) && 
                (
                    this.TextDecoration == other.TextDecoration ||
                    this.TextDecoration != null &&
                    this.TextDecoration.Equals(other.TextDecoration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Focus != null)
                    hash = hash * 59 + this.Focus.GetHashCode();
                if (this.Hover != null)
                    hash = hash * 59 + this.Hover.GetHashCode();
                if (this.Border != null)
                    hash = hash * 59 + this.Border.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.FontFamily != null)
                    hash = hash * 59 + this.FontFamily.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.FontStyle != null)
                    hash = hash * 59 + this.FontStyle.GetHashCode();
                if (this.FontWeight != null)
                    hash = hash * 59 + this.FontWeight.GetHashCode();
                if (this.Margin != null)
                    hash = hash * 59 + this.Margin.GetHashCode();
                if (this.Padding != null)
                    hash = hash * 59 + this.Padding.GetHashCode();
                if (this.TextDecoration != null)
                    hash = hash * 59 + this.TextDecoration.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
