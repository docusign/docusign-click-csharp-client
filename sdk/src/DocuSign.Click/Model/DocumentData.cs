/* 
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// The object of data to be merged with the clickwrap document. A merged document must be created from Click&#39;s web editor and supports fullName, email, company, title and date.
    /// </summary>
    [DataContract]
    public partial class DocumentData :  IEquatable<DocumentData>, IValidatableObject
    {
        public DocumentData()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentData" /> class.
        /// </summary>
        /// <param name="FullName">The full name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document..</param>
        /// <param name="Email">The email address of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document..</param>
        /// <param name="Company">The company name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document..</param>
        /// <param name="JobTitle">The job title of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document..</param>
        /// <param name="Date">A custom date for the contract. This field is created in the UI editor for a Clickwrap document. Only required if present in the document..</param>
        public DocumentData(string FullName = default(string), string Email = default(string), string Company = default(string), string JobTitle = default(string), string Date = default(string))
        {
            this.FullName = FullName;
            this.Email = Email;
            this.Company = Company;
            this.JobTitle = JobTitle;
            this.Date = Date;
        }
        
        /// <summary>
        /// The full name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.
        /// </summary>
        /// <value>The full name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// The email address of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.
        /// </summary>
        /// <value>The email address of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The company name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.
        /// </summary>
        /// <value>The company name of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// The job title of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.
        /// </summary>
        /// <value>The job title of the signer. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }
        /// <summary>
        /// A custom date for the contract. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.
        /// </summary>
        /// <value>A custom date for the contract. This field is created in the UI editor for a Clickwrap document. Only required if present in the document.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentData {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocumentData);
        }

        /// <summary>
        /// Returns true if DocumentData instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.JobTitle == other.JobTitle ||
                    this.JobTitle != null &&
                    this.JobTitle.Equals(other.JobTitle)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.JobTitle != null)
                    hash = hash * 59 + this.JobTitle.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
