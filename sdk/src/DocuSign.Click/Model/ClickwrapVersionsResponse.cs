/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// The results are paginated. Use the following properties to navigate the pages. Use the &#x60;page_number&#x60; query parameter to specify a page.  - &#x60;page&#x60;: The page number of the current results. - &#x60;pageSize&#x60;: The number of results in the current page. - &#x60;minimumPagesRemaining&#x60;: The number of pages that follow this one. 
    /// </summary>
    [DataContract]
    public partial class ClickwrapVersionsResponse :  IEquatable<ClickwrapVersionsResponse>, IValidatableObject
    {
        public ClickwrapVersionsResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClickwrapVersionsResponse" /> class.
        /// </summary>
        /// <param name="Clickwraps">An array of &#x60;clickwrapVersionSummaryResponse&#x60; objects..</param>
        /// <param name="MinimumPagesRemaining">Number of pages remaining in the response..</param>
        /// <param name="Page">The number of the current page..</param>
        /// <param name="PageSize">The number of items per page..</param>
        public ClickwrapVersionsResponse(List<ClickwrapVersionSummaryResponse> Clickwraps = default(List<ClickwrapVersionSummaryResponse>), int? MinimumPagesRemaining = default(int?), int? Page = default(int?), int? PageSize = default(int?))
        {
            this.Clickwraps = Clickwraps;
            this.MinimumPagesRemaining = MinimumPagesRemaining;
            this.Page = Page;
            this.PageSize = PageSize;
        }
        
        /// <summary>
        /// An array of &#x60;clickwrapVersionSummaryResponse&#x60; objects.
        /// </summary>
        /// <value>An array of &#x60;clickwrapVersionSummaryResponse&#x60; objects.</value>
        [DataMember(Name="clickwraps", EmitDefaultValue=false)]
        public List<ClickwrapVersionSummaryResponse> Clickwraps { get; set; }
        /// <summary>
        /// Number of pages remaining in the response.
        /// </summary>
        /// <value>Number of pages remaining in the response.</value>
        [DataMember(Name="minimumPagesRemaining", EmitDefaultValue=false)]
        public int? MinimumPagesRemaining { get; set; }
        /// <summary>
        /// The number of the current page.
        /// </summary>
        /// <value>The number of the current page.</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int? Page { get; set; }
        /// <summary>
        /// The number of items per page.
        /// </summary>
        /// <value>The number of items per page.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClickwrapVersionsResponse {\n");
            sb.Append("  Clickwraps: ").Append(Clickwraps).Append("\n");
            sb.Append("  MinimumPagesRemaining: ").Append(MinimumPagesRemaining).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClickwrapVersionsResponse);
        }

        /// <summary>
        /// Returns true if ClickwrapVersionsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ClickwrapVersionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickwrapVersionsResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Clickwraps == other.Clickwraps ||
                    this.Clickwraps != null &&
                    this.Clickwraps.SequenceEqual(other.Clickwraps)
                ) && 
                (
                    this.MinimumPagesRemaining == other.MinimumPagesRemaining ||
                    this.MinimumPagesRemaining != null &&
                    this.MinimumPagesRemaining.Equals(other.MinimumPagesRemaining)
                ) && 
                (
                    this.Page == other.Page ||
                    this.Page != null &&
                    this.Page.Equals(other.Page)
                ) && 
                (
                    this.PageSize == other.PageSize ||
                    this.PageSize != null &&
                    this.PageSize.Equals(other.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Clickwraps != null)
                    hash = hash * 59 + this.Clickwraps.GetHashCode();
                if (this.MinimumPagesRemaining != null)
                    hash = hash * 59 + this.MinimumPagesRemaining.GetHashCode();
                if (this.Page != null)
                    hash = hash * 59 + this.Page.GetHashCode();
                if (this.PageSize != null)
                    hash = hash * 59 + this.PageSize.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
