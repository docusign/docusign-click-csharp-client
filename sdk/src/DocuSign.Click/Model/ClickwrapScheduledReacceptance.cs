/* 
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// ClickwrapScheduledReacceptance
    /// </summary>
    [DataContract]
    public partial class ClickwrapScheduledReacceptance :  IEquatable<ClickwrapScheduledReacceptance>, IValidatableObject
    {
        public ClickwrapScheduledReacceptance()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClickwrapScheduledReacceptance" /> class.
        /// </summary>
        /// <param name="RecurrenceInterval">RecurrenceInterval.</param>
        /// <param name="RecurrenceIntervalType">RecurrenceIntervalType.</param>
        /// <param name="StartDateTime">StartDateTime.</param>
        public ClickwrapScheduledReacceptance(int? RecurrenceInterval = default(int?), string RecurrenceIntervalType = default(string), Object StartDateTime = default(Object))
        {
            this.RecurrenceInterval = RecurrenceInterval;
            this.RecurrenceIntervalType = RecurrenceIntervalType;
            this.StartDateTime = StartDateTime;
        }
        
        /// <summary>
        /// Gets or Sets RecurrenceInterval
        /// </summary>
        [DataMember(Name="recurrenceInterval", EmitDefaultValue=false)]
        public int? RecurrenceInterval { get; set; }
        /// <summary>
        /// Gets or Sets RecurrenceIntervalType
        /// </summary>
        [DataMember(Name="recurrenceIntervalType", EmitDefaultValue=false)]
        public string RecurrenceIntervalType { get; set; }
        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public Object StartDateTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClickwrapScheduledReacceptance {\n");
            sb.Append("  RecurrenceInterval: ").Append(RecurrenceInterval).Append("\n");
            sb.Append("  RecurrenceIntervalType: ").Append(RecurrenceIntervalType).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClickwrapScheduledReacceptance);
        }

        /// <summary>
        /// Returns true if ClickwrapScheduledReacceptance instances are equal
        /// </summary>
        /// <param name="other">Instance of ClickwrapScheduledReacceptance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickwrapScheduledReacceptance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RecurrenceInterval == other.RecurrenceInterval ||
                    this.RecurrenceInterval != null &&
                    this.RecurrenceInterval.Equals(other.RecurrenceInterval)
                ) && 
                (
                    this.RecurrenceIntervalType == other.RecurrenceIntervalType ||
                    this.RecurrenceIntervalType != null &&
                    this.RecurrenceIntervalType.Equals(other.RecurrenceIntervalType)
                ) && 
                (
                    this.StartDateTime == other.StartDateTime ||
                    this.StartDateTime != null &&
                    this.StartDateTime.Equals(other.StartDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RecurrenceInterval != null)
                    hash = hash * 59 + this.RecurrenceInterval.GetHashCode();
                if (this.RecurrenceIntervalType != null)
                    hash = hash * 59 + this.RecurrenceIntervalType.GetHashCode();
                if (this.StartDateTime != null)
                    hash = hash * 59 + this.StartDateTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
