/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Control the overall clickwrap container and inherited styles such as font.
    /// </summary>
    [DataContract]
    public partial class ContainerStyles :  IEquatable<ContainerStyles>, IValidatableObject
    {
        public ContainerStyles()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerStyles" /> class.
        /// </summary>
        /// <param name="BackgroundColor">This will be restricted to values not equal to: &#39;transparent&#39;, &#39;none&#39;.</param>
        /// <param name="BorderColor">Adjust the border color of the clickwrap surrouding container..</param>
        /// <param name="BorderRadius">Adjust the border radius of the clickwrap surrouding container..</param>
        /// <param name="BorderStyle">Adjust the border style of the clickwrap surrouding container..</param>
        /// <param name="BorderWidth">Adjust the border width of the clickwrap surrouding container..</param>
        public ContainerStyles(string BackgroundColor = default(string), string BorderColor = default(string), string BorderRadius = default(string), string BorderStyle = default(string), string BorderWidth = default(string))
        {
            this.BackgroundColor = BackgroundColor;
            this.BorderColor = BorderColor;
            this.BorderRadius = BorderRadius;
            this.BorderStyle = BorderStyle;
            this.BorderWidth = BorderWidth;
        }
        
        /// <summary>
        /// This will be restricted to values not equal to: &#39;transparent&#39;, &#39;none&#39;
        /// </summary>
        /// <value>This will be restricted to values not equal to: &#39;transparent&#39;, &#39;none&#39;</value>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }
        /// <summary>
        /// Adjust the border color of the clickwrap surrouding container.
        /// </summary>
        /// <value>Adjust the border color of the clickwrap surrouding container.</value>
        [DataMember(Name="borderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }
        /// <summary>
        /// Adjust the border radius of the clickwrap surrouding container.
        /// </summary>
        /// <value>Adjust the border radius of the clickwrap surrouding container.</value>
        [DataMember(Name="borderRadius", EmitDefaultValue=false)]
        public string BorderRadius { get; set; }
        /// <summary>
        /// Adjust the border style of the clickwrap surrouding container.
        /// </summary>
        /// <value>Adjust the border style of the clickwrap surrouding container.</value>
        [DataMember(Name="borderStyle", EmitDefaultValue=false)]
        public string BorderStyle { get; set; }
        /// <summary>
        /// Adjust the border width of the clickwrap surrouding container.
        /// </summary>
        /// <value>Adjust the border width of the clickwrap surrouding container.</value>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public string BorderWidth { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerStyles {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderRadius: ").Append(BorderRadius).Append("\n");
            sb.Append("  BorderStyle: ").Append(BorderStyle).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContainerStyles);
        }

        /// <summary>
        /// Returns true if ContainerStyles instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerStyles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerStyles other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackgroundColor == other.BackgroundColor ||
                    this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    this.BorderColor == other.BorderColor ||
                    this.BorderColor != null &&
                    this.BorderColor.Equals(other.BorderColor)
                ) && 
                (
                    this.BorderRadius == other.BorderRadius ||
                    this.BorderRadius != null &&
                    this.BorderRadius.Equals(other.BorderRadius)
                ) && 
                (
                    this.BorderStyle == other.BorderStyle ||
                    this.BorderStyle != null &&
                    this.BorderStyle.Equals(other.BorderStyle)
                ) && 
                (
                    this.BorderWidth == other.BorderWidth ||
                    this.BorderWidth != null &&
                    this.BorderWidth.Equals(other.BorderWidth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackgroundColor != null)
                    hash = hash * 59 + this.BackgroundColor.GetHashCode();
                if (this.BorderColor != null)
                    hash = hash * 59 + this.BorderColor.GetHashCode();
                if (this.BorderRadius != null)
                    hash = hash * 59 + this.BorderRadius.GetHashCode();
                if (this.BorderStyle != null)
                    hash = hash * 59 + this.BorderStyle.GetHashCode();
                if (this.BorderWidth != null)
                    hash = hash * 59 + this.BorderWidth.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
