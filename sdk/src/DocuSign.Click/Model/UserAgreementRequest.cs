/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Data used to create the agreement.
    /// </summary>
    [DataContract]
    public partial class UserAgreementRequest :  IEquatable<UserAgreementRequest>, IValidatableObject
    {
        public UserAgreementRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementRequest" /> class.
        /// </summary>
        /// <param name="ClientUserId">A unique value that identifies a user. You can use anything that your system uses to identify unique users, such as employee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.  A clickwrap with a specific &#x60;clientUserId&#x60; will not appear again once it has been accepted. .</param>
        /// <param name="DocumentData">This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content .</param>
        /// <param name="Metadata">A customer-defined string you can use in requests. This string will appear in the corresponding response..</param>
        /// <param name="ReturnUrl">The URL to redirect to after the agreement is complete when the agreement is not rendered in an iframe..</param>
        public UserAgreementRequest(string ClientUserId = default(string), Dictionary<string, string> DocumentData = default(Dictionary<string, string>), string Metadata = default(string), string ReturnUrl = default(string))
        {
            this.ClientUserId = ClientUserId;
            this.DocumentData = DocumentData;
            this.Metadata = Metadata;
            this.ReturnUrl = ReturnUrl;
        }
        
        /// <summary>
        /// A unique value that identifies a user. You can use anything that your system uses to identify unique users, such as employee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.  A clickwrap with a specific &#x60;clientUserId&#x60; will not appear again once it has been accepted. 
        /// </summary>
        /// <value>A unique value that identifies a user. You can use anything that your system uses to identify unique users, such as employee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.  A clickwrap with a specific &#x60;clientUserId&#x60; will not appear again once it has been accepted. </value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content 
        /// </summary>
        /// <value>This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content </value>
        [DataMember(Name="documentData", EmitDefaultValue=false)]
        public Dictionary<string, string> DocumentData { get; set; }
        /// <summary>
        /// A customer-defined string you can use in requests. This string will appear in the corresponding response.
        /// </summary>
        /// <value>A customer-defined string you can use in requests. This string will appear in the corresponding response.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// The URL to redirect to after the agreement is complete when the agreement is not rendered in an iframe.
        /// </summary>
        /// <value>The URL to redirect to after the agreement is complete when the agreement is not rendered in an iframe.</value>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAgreementRequest {\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  DocumentData: ").Append(DocumentData).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAgreementRequest);
        }

        /// <summary>
        /// Returns true if UserAgreementRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAgreementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAgreementRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.DocumentData == other.DocumentData ||
                    this.DocumentData != null &&
                    this.DocumentData.SequenceEqual(other.DocumentData)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.ReturnUrl == other.ReturnUrl ||
                    this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(other.ReturnUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.DocumentData != null)
                    hash = hash * 59 + this.DocumentData.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.ReturnUrl != null)
                    hash = hash * 59 + this.ReturnUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
