/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Request body for working with clickwrap.
    /// </summary>
    [DataContract]
    public partial class ClickwrapRequest :  IEquatable<ClickwrapRequest>, IValidatableObject
    {
        public ClickwrapRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClickwrapRequest" /> class.
        /// </summary>
        /// <param name="ClickwrapName">The name of the clickwrap. This field is required..</param>
        /// <param name="DataFields">An array of data fields available to be inserted into the documents..</param>
        /// <param name="DisplaySettings">Display settings for the clickwrap. This object is required..</param>
        /// <param name="Documents">An array of documents. This object is required..</param>
        /// <param name="FieldsToNull">Specifies whether &#x60;scheduledReacceptance&#x60; and &#x60;scheduledDate&#x60; should be cleared. May be one of:  - &#x60;\&quot;scheduledReacceptance\&quot;&#x60; - &#x60;\&quot;scheduledDate\&quot;&#x60; - &#x60;\&quot;scheduledReacceptance,scheduledDate\&quot;&#x60; .</param>
        /// <param name="IsMajorVersion">Not used..</param>
        /// <param name="IsShared">When **true,** indicates that the clickwrap is shared with one or more users in the account..</param>
        /// <param name="Name">Not used..</param>
        /// <param name="RequireReacceptance">When **true,** requires signers who have previously agreed to this clickwrap to sign again. The version number is incremented..</param>
        /// <param name="ScheduledDate">The time and date when this clickwrap is activated..</param>
        /// <param name="ScheduledReacceptance">Specifies the interval between reacceptances in days, weeks, months, or years..</param>
        /// <param name="Status">Clickwrap status. This property is read-only. Possible values:  - &#x60;active&#x60; - &#x60;inactive&#x60; - &#x60;deleted&#x60;.</param>
        /// <param name="TransferFromUserId">Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint..</param>
        /// <param name="TransferToUserId">Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint..</param>
        public ClickwrapRequest(string ClickwrapName = default(string), List<DataField> DataFields = default(List<DataField>), DisplaySettings DisplaySettings = default(DisplaySettings), List<Document> Documents = default(List<Document>), string FieldsToNull = default(string), bool? IsMajorVersion = default(bool?), bool? IsShared = default(bool?), string Name = default(string), bool? RequireReacceptance = default(bool?), Object ScheduledDate = default(Object), ClickwrapScheduledReacceptance ScheduledReacceptance = default(ClickwrapScheduledReacceptance), string Status = default(string), string TransferFromUserId = default(string), string TransferToUserId = default(string))
        {
            this.ClickwrapName = ClickwrapName;
            this.DataFields = DataFields;
            this.DisplaySettings = DisplaySettings;
            this.Documents = Documents;
            this.FieldsToNull = FieldsToNull;
            this.IsMajorVersion = IsMajorVersion;
            this.IsShared = IsShared;
            this.Name = Name;
            this.RequireReacceptance = RequireReacceptance;
            this.ScheduledDate = ScheduledDate;
            this.ScheduledReacceptance = ScheduledReacceptance;
            this.Status = Status;
            this.TransferFromUserId = TransferFromUserId;
            this.TransferToUserId = TransferToUserId;
        }
        
        /// <summary>
        /// The name of the clickwrap. This field is required.
        /// </summary>
        /// <value>The name of the clickwrap. This field is required.</value>
        [DataMember(Name="clickwrapName", EmitDefaultValue=false)]
        public string ClickwrapName { get; set; }
        /// <summary>
        /// An array of data fields available to be inserted into the documents.
        /// </summary>
        /// <value>An array of data fields available to be inserted into the documents.</value>
        [DataMember(Name="dataFields", EmitDefaultValue=false)]
        public List<DataField> DataFields { get; set; }
        /// <summary>
        /// Display settings for the clickwrap. This object is required.
        /// </summary>
        /// <value>Display settings for the clickwrap. This object is required.</value>
        [DataMember(Name="displaySettings", EmitDefaultValue=false)]
        public DisplaySettings DisplaySettings { get; set; }
        /// <summary>
        /// An array of documents. This object is required.
        /// </summary>
        /// <value>An array of documents. This object is required.</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }
        /// <summary>
        /// Specifies whether &#x60;scheduledReacceptance&#x60; and &#x60;scheduledDate&#x60; should be cleared. May be one of:  - &#x60;\&quot;scheduledReacceptance\&quot;&#x60; - &#x60;\&quot;scheduledDate\&quot;&#x60; - &#x60;\&quot;scheduledReacceptance,scheduledDate\&quot;&#x60; 
        /// </summary>
        /// <value>Specifies whether &#x60;scheduledReacceptance&#x60; and &#x60;scheduledDate&#x60; should be cleared. May be one of:  - &#x60;\&quot;scheduledReacceptance\&quot;&#x60; - &#x60;\&quot;scheduledDate\&quot;&#x60; - &#x60;\&quot;scheduledReacceptance,scheduledDate\&quot;&#x60; </value>
        [DataMember(Name="fieldsToNull", EmitDefaultValue=false)]
        public string FieldsToNull { get; set; }
        /// <summary>
        /// Not used.
        /// </summary>
        /// <value>Not used.</value>
        [DataMember(Name="isMajorVersion", EmitDefaultValue=false)]
        public bool? IsMajorVersion { get; set; }
        /// <summary>
        /// When **true,** indicates that the clickwrap is shared with one or more users in the account.
        /// </summary>
        /// <value>When **true,** indicates that the clickwrap is shared with one or more users in the account.</value>
        [DataMember(Name="isShared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }
        /// <summary>
        /// Not used.
        /// </summary>
        /// <value>Not used.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// When **true,** requires signers who have previously agreed to this clickwrap to sign again. The version number is incremented.
        /// </summary>
        /// <value>When **true,** requires signers who have previously agreed to this clickwrap to sign again. The version number is incremented.</value>
        [DataMember(Name="requireReacceptance", EmitDefaultValue=false)]
        public bool? RequireReacceptance { get; set; }
        /// <summary>
        /// The time and date when this clickwrap is activated.
        /// </summary>
        /// <value>The time and date when this clickwrap is activated.</value>
        [DataMember(Name="scheduledDate", EmitDefaultValue=false)]
        public Object ScheduledDate { get; set; }
        /// <summary>
        /// Specifies the interval between reacceptances in days, weeks, months, or years.
        /// </summary>
        /// <value>Specifies the interval between reacceptances in days, weeks, months, or years.</value>
        [DataMember(Name="scheduledReacceptance", EmitDefaultValue=false)]
        public ClickwrapScheduledReacceptance ScheduledReacceptance { get; set; }
        /// <summary>
        /// Clickwrap status. This property is read-only. Possible values:  - &#x60;active&#x60; - &#x60;inactive&#x60; - &#x60;deleted&#x60;
        /// </summary>
        /// <value>Clickwrap status. This property is read-only. Possible values:  - &#x60;active&#x60; - &#x60;inactive&#x60; - &#x60;deleted&#x60;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint.
        /// </summary>
        /// <value>Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint.</value>
        [DataMember(Name="transferFromUserId", EmitDefaultValue=false)]
        public string TransferFromUserId { get; set; }
        /// <summary>
        /// Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint.
        /// </summary>
        /// <value>Not used. To update the user ID of a clickwrap, use the [updateClickwrap](/docs/click-api/reference/accounts/clickwraps/updateclickwrap/) endpoint.</value>
        [DataMember(Name="transferToUserId", EmitDefaultValue=false)]
        public string TransferToUserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClickwrapRequest {\n");
            sb.Append("  ClickwrapName: ").Append(ClickwrapName).Append("\n");
            sb.Append("  DataFields: ").Append(DataFields).Append("\n");
            sb.Append("  DisplaySettings: ").Append(DisplaySettings).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  FieldsToNull: ").Append(FieldsToNull).Append("\n");
            sb.Append("  IsMajorVersion: ").Append(IsMajorVersion).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequireReacceptance: ").Append(RequireReacceptance).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledReacceptance: ").Append(ScheduledReacceptance).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransferFromUserId: ").Append(TransferFromUserId).Append("\n");
            sb.Append("  TransferToUserId: ").Append(TransferToUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClickwrapRequest);
        }

        /// <summary>
        /// Returns true if ClickwrapRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ClickwrapRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickwrapRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClickwrapName == other.ClickwrapName ||
                    this.ClickwrapName != null &&
                    this.ClickwrapName.Equals(other.ClickwrapName)
                ) && 
                (
                    this.DataFields == other.DataFields ||
                    this.DataFields != null &&
                    this.DataFields.SequenceEqual(other.DataFields)
                ) && 
                (
                    this.DisplaySettings == other.DisplaySettings ||
                    this.DisplaySettings != null &&
                    this.DisplaySettings.Equals(other.DisplaySettings)
                ) && 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    this.FieldsToNull == other.FieldsToNull ||
                    this.FieldsToNull != null &&
                    this.FieldsToNull.Equals(other.FieldsToNull)
                ) && 
                (
                    this.IsMajorVersion == other.IsMajorVersion ||
                    this.IsMajorVersion != null &&
                    this.IsMajorVersion.Equals(other.IsMajorVersion)
                ) && 
                (
                    this.IsShared == other.IsShared ||
                    this.IsShared != null &&
                    this.IsShared.Equals(other.IsShared)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RequireReacceptance == other.RequireReacceptance ||
                    this.RequireReacceptance != null &&
                    this.RequireReacceptance.Equals(other.RequireReacceptance)
                ) && 
                (
                    this.ScheduledDate == other.ScheduledDate ||
                    this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    this.ScheduledReacceptance == other.ScheduledReacceptance ||
                    this.ScheduledReacceptance != null &&
                    this.ScheduledReacceptance.Equals(other.ScheduledReacceptance)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TransferFromUserId == other.TransferFromUserId ||
                    this.TransferFromUserId != null &&
                    this.TransferFromUserId.Equals(other.TransferFromUserId)
                ) && 
                (
                    this.TransferToUserId == other.TransferToUserId ||
                    this.TransferToUserId != null &&
                    this.TransferToUserId.Equals(other.TransferToUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClickwrapName != null)
                    hash = hash * 59 + this.ClickwrapName.GetHashCode();
                if (this.DataFields != null)
                    hash = hash * 59 + this.DataFields.GetHashCode();
                if (this.DisplaySettings != null)
                    hash = hash * 59 + this.DisplaySettings.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.FieldsToNull != null)
                    hash = hash * 59 + this.FieldsToNull.GetHashCode();
                if (this.IsMajorVersion != null)
                    hash = hash * 59 + this.IsMajorVersion.GetHashCode();
                if (this.IsShared != null)
                    hash = hash * 59 + this.IsShared.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RequireReacceptance != null)
                    hash = hash * 59 + this.RequireReacceptance.GetHashCode();
                if (this.ScheduledDate != null)
                    hash = hash * 59 + this.ScheduledDate.GetHashCode();
                if (this.ScheduledReacceptance != null)
                    hash = hash * 59 + this.ScheduledReacceptance.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TransferFromUserId != null)
                    hash = hash * 59 + this.TransferFromUserId.GetHashCode();
                if (this.TransferToUserId != null)
                    hash = hash * 59 + this.TransferToUserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
