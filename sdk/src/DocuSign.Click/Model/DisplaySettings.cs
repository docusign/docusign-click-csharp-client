/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Information about how an agreement is displayed.
    /// </summary>
    [DataContract]
    public partial class DisplaySettings :  IEquatable<DisplaySettings>, IValidatableObject
    {
        public DisplaySettings()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplaySettings" /> class.
        /// </summary>
        /// <param name="ActionButtonAlignment">Position of the Accept button in the agreement. One of   - &#x60;right&#x60; - &#x60;left&#x60; .</param>
        /// <param name="AllowClientOnly">When **true,** this agreement can be be used in client-only integrations..</param>
        /// <param name="AllowedHosts">Hosts that can host the clickwrap.  It is an error if the clickwrap didn&#39;t come from one of these hosts. .</param>
        /// <param name="BrandId">The signing brand ID..</param>
        /// <param name="ConsentButtonText">Text on the agree button..</param>
        /// <param name="ConsentText">The statement prefixing the Electronic Record and Signature Disclosure agreement..</param>
        /// <param name="DeclineButtonText">The text on the decline button..</param>
        /// <param name="DisplayName">The display name of the user agreement..</param>
        /// <param name="DocumentDisplay">Display type: link, document or pdf.</param>
        /// <param name="Downloadable">**True** if the agreement is downloadable..</param>
        /// <param name="Format">Display format: inline or modal..</param>
        /// <param name="HasDeclineButton">**True** if the agreement has a decline button..</param>
        /// <param name="MustRead">**True** if the user needs to scroll to the end of the document..</param>
        /// <param name="MustView">**True** if the user must view the document..</param>
        /// <param name="RecordDeclineResponses">When **true,** this agreement records decline actions..</param>
        /// <param name="RequireAccept">**True** if a checkbox is required to accept..</param>
        /// <param name="SendToEmail">**True** if send to email is applicable..</param>
        /// <param name="StatementAlignment">Position of the agreement statement. One of   - &#x60;top&#x60; - &#x60;bottom&#x60; .</param>
        public DisplaySettings(string ActionButtonAlignment = default(string), bool? AllowClientOnly = default(bool?), List<string> AllowedHosts = default(List<string>), string BrandId = default(string), string ConsentButtonText = default(string), string ConsentText = default(string), string DeclineButtonText = default(string), string DisplayName = default(string), string DocumentDisplay = default(string), bool? Downloadable = default(bool?), string Format = default(string), bool? HasDeclineButton = default(bool?), bool? MustRead = default(bool?), bool? MustView = default(bool?), bool? RecordDeclineResponses = default(bool?), bool? RequireAccept = default(bool?), bool? SendToEmail = default(bool?), string StatementAlignment = default(string))
        {
            this.ActionButtonAlignment = ActionButtonAlignment;
            this.AllowClientOnly = AllowClientOnly;
            this.AllowedHosts = AllowedHosts;
            this.BrandId = BrandId;
            this.ConsentButtonText = ConsentButtonText;
            this.ConsentText = ConsentText;
            this.DeclineButtonText = DeclineButtonText;
            this.DisplayName = DisplayName;
            this.DocumentDisplay = DocumentDisplay;
            this.Downloadable = Downloadable;
            this.Format = Format;
            this.HasDeclineButton = HasDeclineButton;
            this.MustRead = MustRead;
            this.MustView = MustView;
            this.RecordDeclineResponses = RecordDeclineResponses;
            this.RequireAccept = RequireAccept;
            this.SendToEmail = SendToEmail;
            this.StatementAlignment = StatementAlignment;
        }
        
        /// <summary>
        /// Position of the Accept button in the agreement. One of   - &#x60;right&#x60; - &#x60;left&#x60; 
        /// </summary>
        /// <value>Position of the Accept button in the agreement. One of   - &#x60;right&#x60; - &#x60;left&#x60; </value>
        [DataMember(Name="actionButtonAlignment", EmitDefaultValue=false)]
        public string ActionButtonAlignment { get; set; }
        /// <summary>
        /// When **true,** this agreement can be be used in client-only integrations.
        /// </summary>
        /// <value>When **true,** this agreement can be be used in client-only integrations.</value>
        [DataMember(Name="allowClientOnly", EmitDefaultValue=false)]
        public bool? AllowClientOnly { get; set; }
        /// <summary>
        /// Hosts that can host the clickwrap.  It is an error if the clickwrap didn&#39;t come from one of these hosts. 
        /// </summary>
        /// <value>Hosts that can host the clickwrap.  It is an error if the clickwrap didn&#39;t come from one of these hosts. </value>
        [DataMember(Name="allowedHosts", EmitDefaultValue=false)]
        public List<string> AllowedHosts { get; set; }
        /// <summary>
        /// The signing brand ID.
        /// </summary>
        /// <value>The signing brand ID.</value>
        [DataMember(Name="brandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }
        /// <summary>
        /// Text on the agree button.
        /// </summary>
        /// <value>Text on the agree button.</value>
        [DataMember(Name="consentButtonText", EmitDefaultValue=false)]
        public string ConsentButtonText { get; set; }
        /// <summary>
        /// The statement prefixing the Electronic Record and Signature Disclosure agreement.
        /// </summary>
        /// <value>The statement prefixing the Electronic Record and Signature Disclosure agreement.</value>
        [DataMember(Name="consentText", EmitDefaultValue=false)]
        public string ConsentText { get; set; }
        /// <summary>
        /// The text on the decline button.
        /// </summary>
        /// <value>The text on the decline button.</value>
        [DataMember(Name="declineButtonText", EmitDefaultValue=false)]
        public string DeclineButtonText { get; set; }
        /// <summary>
        /// The display name of the user agreement.
        /// </summary>
        /// <value>The display name of the user agreement.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Display type: link, document or pdf
        /// </summary>
        /// <value>Display type: link, document or pdf</value>
        [DataMember(Name="documentDisplay", EmitDefaultValue=false)]
        public string DocumentDisplay { get; set; }
        /// <summary>
        /// **True** if the agreement is downloadable.
        /// </summary>
        /// <value>**True** if the agreement is downloadable.</value>
        [DataMember(Name="downloadable", EmitDefaultValue=false)]
        public bool? Downloadable { get; set; }
        /// <summary>
        /// Display format: inline or modal.
        /// </summary>
        /// <value>Display format: inline or modal.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }
        /// <summary>
        /// **True** if the agreement has a decline button.
        /// </summary>
        /// <value>**True** if the agreement has a decline button.</value>
        [DataMember(Name="hasDeclineButton", EmitDefaultValue=false)]
        public bool? HasDeclineButton { get; set; }
        /// <summary>
        /// **True** if the user needs to scroll to the end of the document.
        /// </summary>
        /// <value>**True** if the user needs to scroll to the end of the document.</value>
        [DataMember(Name="mustRead", EmitDefaultValue=false)]
        public bool? MustRead { get; set; }
        /// <summary>
        /// **True** if the user must view the document.
        /// </summary>
        /// <value>**True** if the user must view the document.</value>
        [DataMember(Name="mustView", EmitDefaultValue=false)]
        public bool? MustView { get; set; }
        /// <summary>
        /// When **true,** this agreement records decline actions.
        /// </summary>
        /// <value>When **true,** this agreement records decline actions.</value>
        [DataMember(Name="recordDeclineResponses", EmitDefaultValue=false)]
        public bool? RecordDeclineResponses { get; set; }
        /// <summary>
        /// **True** if a checkbox is required to accept.
        /// </summary>
        /// <value>**True** if a checkbox is required to accept.</value>
        [DataMember(Name="requireAccept", EmitDefaultValue=false)]
        public bool? RequireAccept { get; set; }
        /// <summary>
        /// **True** if send to email is applicable.
        /// </summary>
        /// <value>**True** if send to email is applicable.</value>
        [DataMember(Name="sendToEmail", EmitDefaultValue=false)]
        public bool? SendToEmail { get; set; }
        /// <summary>
        /// Position of the agreement statement. One of   - &#x60;top&#x60; - &#x60;bottom&#x60; 
        /// </summary>
        /// <value>Position of the agreement statement. One of   - &#x60;top&#x60; - &#x60;bottom&#x60; </value>
        [DataMember(Name="statementAlignment", EmitDefaultValue=false)]
        public string StatementAlignment { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplaySettings {\n");
            sb.Append("  ActionButtonAlignment: ").Append(ActionButtonAlignment).Append("\n");
            sb.Append("  AllowClientOnly: ").Append(AllowClientOnly).Append("\n");
            sb.Append("  AllowedHosts: ").Append(AllowedHosts).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  ConsentButtonText: ").Append(ConsentButtonText).Append("\n");
            sb.Append("  ConsentText: ").Append(ConsentText).Append("\n");
            sb.Append("  DeclineButtonText: ").Append(DeclineButtonText).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DocumentDisplay: ").Append(DocumentDisplay).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  HasDeclineButton: ").Append(HasDeclineButton).Append("\n");
            sb.Append("  MustRead: ").Append(MustRead).Append("\n");
            sb.Append("  MustView: ").Append(MustView).Append("\n");
            sb.Append("  RecordDeclineResponses: ").Append(RecordDeclineResponses).Append("\n");
            sb.Append("  RequireAccept: ").Append(RequireAccept).Append("\n");
            sb.Append("  SendToEmail: ").Append(SendToEmail).Append("\n");
            sb.Append("  StatementAlignment: ").Append(StatementAlignment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplaySettings);
        }

        /// <summary>
        /// Returns true if DisplaySettings instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplaySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplaySettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActionButtonAlignment == other.ActionButtonAlignment ||
                    this.ActionButtonAlignment != null &&
                    this.ActionButtonAlignment.Equals(other.ActionButtonAlignment)
                ) && 
                (
                    this.AllowClientOnly == other.AllowClientOnly ||
                    this.AllowClientOnly != null &&
                    this.AllowClientOnly.Equals(other.AllowClientOnly)
                ) && 
                (
                    this.AllowedHosts == other.AllowedHosts ||
                    this.AllowedHosts != null &&
                    this.AllowedHosts.SequenceEqual(other.AllowedHosts)
                ) && 
                (
                    this.BrandId == other.BrandId ||
                    this.BrandId != null &&
                    this.BrandId.Equals(other.BrandId)
                ) && 
                (
                    this.ConsentButtonText == other.ConsentButtonText ||
                    this.ConsentButtonText != null &&
                    this.ConsentButtonText.Equals(other.ConsentButtonText)
                ) && 
                (
                    this.ConsentText == other.ConsentText ||
                    this.ConsentText != null &&
                    this.ConsentText.Equals(other.ConsentText)
                ) && 
                (
                    this.DeclineButtonText == other.DeclineButtonText ||
                    this.DeclineButtonText != null &&
                    this.DeclineButtonText.Equals(other.DeclineButtonText)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.DocumentDisplay == other.DocumentDisplay ||
                    this.DocumentDisplay != null &&
                    this.DocumentDisplay.Equals(other.DocumentDisplay)
                ) && 
                (
                    this.Downloadable == other.Downloadable ||
                    this.Downloadable != null &&
                    this.Downloadable.Equals(other.Downloadable)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.HasDeclineButton == other.HasDeclineButton ||
                    this.HasDeclineButton != null &&
                    this.HasDeclineButton.Equals(other.HasDeclineButton)
                ) && 
                (
                    this.MustRead == other.MustRead ||
                    this.MustRead != null &&
                    this.MustRead.Equals(other.MustRead)
                ) && 
                (
                    this.MustView == other.MustView ||
                    this.MustView != null &&
                    this.MustView.Equals(other.MustView)
                ) && 
                (
                    this.RecordDeclineResponses == other.RecordDeclineResponses ||
                    this.RecordDeclineResponses != null &&
                    this.RecordDeclineResponses.Equals(other.RecordDeclineResponses)
                ) && 
                (
                    this.RequireAccept == other.RequireAccept ||
                    this.RequireAccept != null &&
                    this.RequireAccept.Equals(other.RequireAccept)
                ) && 
                (
                    this.SendToEmail == other.SendToEmail ||
                    this.SendToEmail != null &&
                    this.SendToEmail.Equals(other.SendToEmail)
                ) && 
                (
                    this.StatementAlignment == other.StatementAlignment ||
                    this.StatementAlignment != null &&
                    this.StatementAlignment.Equals(other.StatementAlignment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActionButtonAlignment != null)
                    hash = hash * 59 + this.ActionButtonAlignment.GetHashCode();
                if (this.AllowClientOnly != null)
                    hash = hash * 59 + this.AllowClientOnly.GetHashCode();
                if (this.AllowedHosts != null)
                    hash = hash * 59 + this.AllowedHosts.GetHashCode();
                if (this.BrandId != null)
                    hash = hash * 59 + this.BrandId.GetHashCode();
                if (this.ConsentButtonText != null)
                    hash = hash * 59 + this.ConsentButtonText.GetHashCode();
                if (this.ConsentText != null)
                    hash = hash * 59 + this.ConsentText.GetHashCode();
                if (this.DeclineButtonText != null)
                    hash = hash * 59 + this.DeclineButtonText.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.DocumentDisplay != null)
                    hash = hash * 59 + this.DocumentDisplay.GetHashCode();
                if (this.Downloadable != null)
                    hash = hash * 59 + this.Downloadable.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.HasDeclineButton != null)
                    hash = hash * 59 + this.HasDeclineButton.GetHashCode();
                if (this.MustRead != null)
                    hash = hash * 59 + this.MustRead.GetHashCode();
                if (this.MustView != null)
                    hash = hash * 59 + this.MustView.GetHashCode();
                if (this.RecordDeclineResponses != null)
                    hash = hash * 59 + this.RecordDeclineResponses.GetHashCode();
                if (this.RequireAccept != null)
                    hash = hash * 59 + this.RequireAccept.GetHashCode();
                if (this.SendToEmail != null)
                    hash = hash * 59 + this.SendToEmail.GetHashCode();
                if (this.StatementAlignment != null)
                    hash = hash * 59 + this.StatementAlignment.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
