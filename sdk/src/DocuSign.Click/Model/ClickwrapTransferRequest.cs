/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// Data used to transfer a clickwrap from one user to another.
    /// </summary>
    [DataContract]
    public partial class ClickwrapTransferRequest :  IEquatable<ClickwrapTransferRequest>, IValidatableObject
    {
        public ClickwrapTransferRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClickwrapTransferRequest" /> class.
        /// </summary>
        /// <param name="TransferFromUserId">ID of the user to transfer from. This property is required..</param>
        /// <param name="TransferToUserId">ID of the user to transfer to. This property is required..</param>
        public ClickwrapTransferRequest(string TransferFromUserId = default(string), string TransferToUserId = default(string))
        {
            this.TransferFromUserId = TransferFromUserId;
            this.TransferToUserId = TransferToUserId;
        }
        
        /// <summary>
        /// ID of the user to transfer from. This property is required.
        /// </summary>
        /// <value>ID of the user to transfer from. This property is required.</value>
        [DataMember(Name="transferFromUserId", EmitDefaultValue=false)]
        public string TransferFromUserId { get; set; }
        /// <summary>
        /// ID of the user to transfer to. This property is required.
        /// </summary>
        /// <value>ID of the user to transfer to. This property is required.</value>
        [DataMember(Name="transferToUserId", EmitDefaultValue=false)]
        public string TransferToUserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClickwrapTransferRequest {\n");
            sb.Append("  TransferFromUserId: ").Append(TransferFromUserId).Append("\n");
            sb.Append("  TransferToUserId: ").Append(TransferToUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClickwrapTransferRequest);
        }

        /// <summary>
        /// Returns true if ClickwrapTransferRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ClickwrapTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickwrapTransferRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TransferFromUserId == other.TransferFromUserId ||
                    this.TransferFromUserId != null &&
                    this.TransferFromUserId.Equals(other.TransferFromUserId)
                ) && 
                (
                    this.TransferToUserId == other.TransferToUserId ||
                    this.TransferToUserId != null &&
                    this.TransferToUserId.Equals(other.TransferToUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TransferFromUserId != null)
                    hash = hash * 59 + this.TransferFromUserId.GetHashCode();
                if (this.TransferToUserId != null)
                    hash = hash * 59 + this.TransferToUserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
