/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// This property specifies the custom style provided when the agreement was created by [customizing the template appearance][].    [customizing the template appearance]: /docs/click-api/click101/customize-elastic-template-appearance/ 
    /// </summary>
    [DataContract]
    public partial class UserAgreementResponseStyle :  IEquatable<UserAgreementResponseStyle>, IValidatableObject
    {
        public UserAgreementResponseStyle()
        {
            // Empty Constructor
        }

                /// <summary>
        /// Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap &#x60;format&#x60; is &#x60;inline&#x60;.
        /// </summary>
        /// <value>Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap &#x60;format&#x60; is &#x60;inline&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScrollControlEnum
        {
            
            /// <summary>
            /// Enum Browser for value: browser
            /// </summary>
            [EnumMember(Value = "browser")]
            Browser = 1,
            
            /// <summary>
            /// Enum Fillparent for value: fill_parent
            /// </summary>
            [EnumMember(Value = "fill_parent")]
            Fillparent = 2
        }

        /// <summary>
        /// Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap `format` is `inline`.
        /// </summary>
        /// <value>Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap `format` is `inline`.</value>
        [DataMember(Name="scrollControl", EmitDefaultValue=false)]
        public ScrollControlEnum? ScrollControl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementResponseStyle" /> class.
        /// </summary>
        /// <param name="AgreeButton">Control the display of the Agree button..</param>
        /// <param name="AgreementStatement">Control the display of the agreement statement..</param>
        /// <param name="Container">Control the overall clickwrap container and inherited styles such as font..</param>
        /// <param name="DisclosureLink">Control the display of the disclosure link..</param>
        /// <param name="DocumentLink">Control the display of the agreement statement..</param>
        /// <param name="Header">Control the display of the header..</param>
        /// <param name="ScrollControl">Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap &#x60;format&#x60; is &#x60;inline&#x60;..</param>
        public UserAgreementResponseStyle(AgreeButtonStyles AgreeButton = default(AgreeButtonStyles), AgreementStatementStyles AgreementStatement = default(AgreementStatementStyles), ContainerStyles Container = default(ContainerStyles), DisclosureLinkStyles DisclosureLink = default(DisclosureLinkStyles), DocumentLinkStyles DocumentLink = default(DocumentLinkStyles), HeaderStyles Header = default(HeaderStyles), ScrollControlEnum? ScrollControl = default(ScrollControlEnum?))
        {
            this.AgreeButton = AgreeButton;
            this.AgreementStatement = AgreementStatement;
            this.Container = Container;
            this.DisclosureLink = DisclosureLink;
            this.DocumentLink = DocumentLink;
            this.Header = Header;
            this.ScrollControl = ScrollControl;
        }
        
        /// <summary>
        /// Control the display of the Agree button.
        /// </summary>
        /// <value>Control the display of the Agree button.</value>
        [DataMember(Name="agreeButton", EmitDefaultValue=false)]
        public AgreeButtonStyles AgreeButton { get; set; }
        /// <summary>
        /// Control the display of the agreement statement.
        /// </summary>
        /// <value>Control the display of the agreement statement.</value>
        [DataMember(Name="agreementStatement", EmitDefaultValue=false)]
        public AgreementStatementStyles AgreementStatement { get; set; }
        /// <summary>
        /// Control the overall clickwrap container and inherited styles such as font.
        /// </summary>
        /// <value>Control the overall clickwrap container and inherited styles such as font.</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public ContainerStyles Container { get; set; }
        /// <summary>
        /// Control the display of the disclosure link.
        /// </summary>
        /// <value>Control the display of the disclosure link.</value>
        [DataMember(Name="disclosureLink", EmitDefaultValue=false)]
        public DisclosureLinkStyles DisclosureLink { get; set; }
        /// <summary>
        /// Control the display of the agreement statement.
        /// </summary>
        /// <value>Control the display of the agreement statement.</value>
        [DataMember(Name="documentLink", EmitDefaultValue=false)]
        public DocumentLinkStyles DocumentLink { get; set; }
        /// <summary>
        /// Control the display of the header.
        /// </summary>
        /// <value>Control the display of the header.</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public HeaderStyles Header { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAgreementResponseStyle {\n");
            sb.Append("  AgreeButton: ").Append(AgreeButton).Append("\n");
            sb.Append("  AgreementStatement: ").Append(AgreementStatement).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  DisclosureLink: ").Append(DisclosureLink).Append("\n");
            sb.Append("  DocumentLink: ").Append(DocumentLink).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  ScrollControl: ").Append(ScrollControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAgreementResponseStyle);
        }

        /// <summary>
        /// Returns true if UserAgreementResponseStyle instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAgreementResponseStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAgreementResponseStyle other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AgreeButton == other.AgreeButton ||
                    this.AgreeButton != null &&
                    this.AgreeButton.Equals(other.AgreeButton)
                ) && 
                (
                    this.AgreementStatement == other.AgreementStatement ||
                    this.AgreementStatement != null &&
                    this.AgreementStatement.Equals(other.AgreementStatement)
                ) && 
                (
                    this.Container == other.Container ||
                    this.Container != null &&
                    this.Container.Equals(other.Container)
                ) && 
                (
                    this.DisclosureLink == other.DisclosureLink ||
                    this.DisclosureLink != null &&
                    this.DisclosureLink.Equals(other.DisclosureLink)
                ) && 
                (
                    this.DocumentLink == other.DocumentLink ||
                    this.DocumentLink != null &&
                    this.DocumentLink.Equals(other.DocumentLink)
                ) && 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.ScrollControl == other.ScrollControl ||
                    this.ScrollControl != null &&
                    this.ScrollControl.Equals(other.ScrollControl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AgreeButton != null)
                    hash = hash * 59 + this.AgreeButton.GetHashCode();
                if (this.AgreementStatement != null)
                    hash = hash * 59 + this.AgreementStatement.GetHashCode();
                if (this.Container != null)
                    hash = hash * 59 + this.Container.GetHashCode();
                if (this.DisclosureLink != null)
                    hash = hash * 59 + this.DisclosureLink.GetHashCode();
                if (this.DocumentLink != null)
                    hash = hash * 59 + this.DocumentLink.GetHashCode();
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.ScrollControl != null)
                    hash = hash * 59 + this.ScrollControl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
