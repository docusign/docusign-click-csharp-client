/* 
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Click.Client.SwaggerDateConverter;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// UserAgreementResponse
    /// </summary>
    [DataContract]
    public partial class UserAgreementResponse :  IEquatable<UserAgreementResponse>, IValidatableObject
    {
        public UserAgreementResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementResponse" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="AgreedOn">AgreedOn.</param>
        /// <param name="AgreementId">AgreementId.</param>
        /// <param name="AgreementUrl">AgreementUrl.</param>
        /// <param name="ClickwrapId">ClickwrapId.</param>
        /// <param name="ClientUserId">ClientUserId.</param>
        /// <param name="ConsumerDisclosureHtml">ConsumerDisclosureHtml.</param>
        /// <param name="CreatedOn">CreatedOn.</param>
        /// <param name="DeclinedOn">DeclinedOn.</param>
        /// <param name="Documents">Documents.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="Settings">Settings.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Version">Version.</param>
        /// <param name="VersionId">VersionId.</param>
        /// <param name="VersionNumber">VersionNumber.</param>
        public UserAgreementResponse(string AccountId = default(string), Object AgreedOn = default(Object), string AgreementId = default(string), string AgreementUrl = default(string), string ClickwrapId = default(string), string ClientUserId = default(string), string ConsumerDisclosureHtml = default(string), Object CreatedOn = default(Object), Object DeclinedOn = default(Object), List<Document> Documents = default(List<Document>), string Metadata = default(string), DisplaySettings Settings = default(DisplaySettings), string Status = default(string), string Version = default(string), string VersionId = default(string), int? VersionNumber = default(int?))
        {
            this.AccountId = AccountId;
            this.AgreedOn = AgreedOn;
            this.AgreementId = AgreementId;
            this.AgreementUrl = AgreementUrl;
            this.ClickwrapId = ClickwrapId;
            this.ClientUserId = ClientUserId;
            this.ConsumerDisclosureHtml = ConsumerDisclosureHtml;
            this.CreatedOn = CreatedOn;
            this.DeclinedOn = DeclinedOn;
            this.Documents = Documents;
            this.Metadata = Metadata;
            this.Settings = Settings;
            this.Status = Status;
            this.Version = Version;
            this.VersionId = VersionId;
            this.VersionNumber = VersionNumber;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets AgreedOn
        /// </summary>
        [DataMember(Name="agreedOn", EmitDefaultValue=false)]
        public Object AgreedOn { get; set; }
        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name="agreementId", EmitDefaultValue=false)]
        public string AgreementId { get; set; }
        /// <summary>
        /// Gets or Sets AgreementUrl
        /// </summary>
        [DataMember(Name="agreementUrl", EmitDefaultValue=false)]
        public string AgreementUrl { get; set; }
        /// <summary>
        /// Gets or Sets ClickwrapId
        /// </summary>
        [DataMember(Name="clickwrapId", EmitDefaultValue=false)]
        public string ClickwrapId { get; set; }
        /// <summary>
        /// Gets or Sets ClientUserId
        /// </summary>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// Gets or Sets ConsumerDisclosureHtml
        /// </summary>
        [DataMember(Name="consumerDisclosureHtml", EmitDefaultValue=false)]
        public string ConsumerDisclosureHtml { get; set; }
        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public Object CreatedOn { get; set; }
        /// <summary>
        /// Gets or Sets DeclinedOn
        /// </summary>
        [DataMember(Name="declinedOn", EmitDefaultValue=false)]
        public Object DeclinedOn { get; set; }
        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public DisplaySettings Settings { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name="versionId", EmitDefaultValue=false)]
        public string VersionId { get; set; }
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="versionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAgreementResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AgreedOn: ").Append(AgreedOn).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  AgreementUrl: ").Append(AgreementUrl).Append("\n");
            sb.Append("  ClickwrapId: ").Append(ClickwrapId).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  ConsumerDisclosureHtml: ").Append(ConsumerDisclosureHtml).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeclinedOn: ").Append(DeclinedOn).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAgreementResponse);
        }

        /// <summary>
        /// Returns true if UserAgreementResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAgreementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAgreementResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AgreedOn == other.AgreedOn ||
                    this.AgreedOn != null &&
                    this.AgreedOn.Equals(other.AgreedOn)
                ) && 
                (
                    this.AgreementId == other.AgreementId ||
                    this.AgreementId != null &&
                    this.AgreementId.Equals(other.AgreementId)
                ) && 
                (
                    this.AgreementUrl == other.AgreementUrl ||
                    this.AgreementUrl != null &&
                    this.AgreementUrl.Equals(other.AgreementUrl)
                ) && 
                (
                    this.ClickwrapId == other.ClickwrapId ||
                    this.ClickwrapId != null &&
                    this.ClickwrapId.Equals(other.ClickwrapId)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.ConsumerDisclosureHtml == other.ConsumerDisclosureHtml ||
                    this.ConsumerDisclosureHtml != null &&
                    this.ConsumerDisclosureHtml.Equals(other.ConsumerDisclosureHtml)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.DeclinedOn == other.DeclinedOn ||
                    this.DeclinedOn != null &&
                    this.DeclinedOn.Equals(other.DeclinedOn)
                ) && 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.Equals(other.Settings)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.VersionId == other.VersionId ||
                    this.VersionId != null &&
                    this.VersionId.Equals(other.VersionId)
                ) && 
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AgreedOn != null)
                    hash = hash * 59 + this.AgreedOn.GetHashCode();
                if (this.AgreementId != null)
                    hash = hash * 59 + this.AgreementId.GetHashCode();
                if (this.AgreementUrl != null)
                    hash = hash * 59 + this.AgreementUrl.GetHashCode();
                if (this.ClickwrapId != null)
                    hash = hash * 59 + this.ClickwrapId.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.ConsumerDisclosureHtml != null)
                    hash = hash * 59 + this.ConsumerDisclosureHtml.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.DeclinedOn != null)
                    hash = hash * 59 + this.DeclinedOn.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.VersionId != null)
                    hash = hash * 59 + this.VersionId.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
