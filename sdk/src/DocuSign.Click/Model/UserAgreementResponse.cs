/* 
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Click.Model
{
    /// <summary>
    /// UserAgreementResponse
    /// </summary>
    [DataContract]
    public partial class UserAgreementResponse :  IEquatable<UserAgreementResponse>, IValidatableObject
    {
        public UserAgreementResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementResponse" /> class.
        /// </summary>
        /// <param name="AccountId">The external account number (int) or account ID GUID..</param>
        /// <param name="AgreedOn">Date that the client last completed the agreement.  This property is null if &#x60;agreementUrl&#x60; is not null and &#x60;status&#x60; is not  &#x60;agreed&#x60;..</param>
        /// <param name="AgreementId">The agreement ID..</param>
        /// <param name="AgreementUrl">When not null, an agreement is required for user specified by  &#x60;clientUserId&#x60;.  When missing the user specified by &#x60;clientUserId&#x60; has already agreed and does not require a new acceptance.  Use this URL to render the agreement in a web page.  &lt;!- - or redirected to when providing redirect_url as a query parameter. - -&gt; .</param>
        /// <param name="ClickwrapId">The ID of the clickwrap..</param>
        /// <param name="ClientUserId">A unique value that identifies a user.\\nYou can use anything that your system uses\\nto identify unique users, such as\\nemployee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.\\n\\nA clickwrap with a specific &#x60;clientUserId&#x60; will not appear again\\nonce it has been accepted.\\n\&quot;.</param>
        /// <param name="ConsumerDisclosureEnabled">**True** if consumer disclosure was required by this agreement..</param>
        /// <param name="ConsumerDisclosureHtml">The customer-branded HTML with the Electronic Record and Signature Disclosure information.</param>
        /// <param name="CreatedOn">The date when the clickwrap was created. May be null..</param>
        /// <param name="DataFields">The list of all the data fields available for the clickwrap (custom fields and standard fields)..</param>
        /// <param name="DeclinedOn">The date when the user declined the most recent required agreement.  This property is valid only when &#x60;status&#x60; is &#x60;declined&#x60;. Otherwise it is null..</param>
        /// <param name="DocumentData">This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content .</param>
        /// <param name="Documents">An array of documents..</param>
        /// <param name="Metadata">A customer-defined string you can use in requests. This string will appear in the corresponding response..</param>
        /// <param name="ReturnUrl">The URL redirected to after the agreement was completed..</param>
        /// <param name="Settings">The display settings for this agreement..</param>
        /// <param name="Status">User agreement status. One of:  - &#x60;created&#x60; - &#x60;agreed&#x60; - &#x60;declined&#x60;.</param>
        /// <param name="Style">Style.</param>
        /// <param name="Version">The human-readable semver version string..</param>
        /// <param name="VersionId">The ID of the version..</param>
        /// <param name="VersionNumber">Version of the clickwrap..</param>
        public UserAgreementResponse(string AccountId = default(string), Object AgreedOn = default(Object), string AgreementId = default(string), string AgreementUrl = default(string), string ClickwrapId = default(string), string ClientUserId = default(string), bool? ConsumerDisclosureEnabled = default(bool?), string ConsumerDisclosureHtml = default(string), Object CreatedOn = default(Object), List<DataField> DataFields = default(List<DataField>), Object DeclinedOn = default(Object), Dictionary<string, string> DocumentData = default(Dictionary<string, string>), List<Document> Documents = default(List<Document>), string Metadata = default(string), string ReturnUrl = default(string), DisplaySettings Settings = default(DisplaySettings), string Status = default(string), UserAgreementResponseStyle Style = default(UserAgreementResponseStyle), string Version = default(string), string VersionId = default(string), int? VersionNumber = default(int?))
        {
            this.AccountId = AccountId;
            this.AgreedOn = AgreedOn;
            this.AgreementId = AgreementId;
            this.AgreementUrl = AgreementUrl;
            this.ClickwrapId = ClickwrapId;
            this.ClientUserId = ClientUserId;
            this.ConsumerDisclosureEnabled = ConsumerDisclosureEnabled;
            this.ConsumerDisclosureHtml = ConsumerDisclosureHtml;
            this.CreatedOn = CreatedOn;
            this.DataFields = DataFields;
            this.DeclinedOn = DeclinedOn;
            this.DocumentData = DocumentData;
            this.Documents = Documents;
            this.Metadata = Metadata;
            this.ReturnUrl = ReturnUrl;
            this.Settings = Settings;
            this.Status = Status;
            this.Style = Style;
            this.Version = Version;
            this.VersionId = VersionId;
            this.VersionNumber = VersionNumber;
        }
        
        /// <summary>
        /// The external account number (int) or account ID GUID.
        /// </summary>
        /// <value>The external account number (int) or account ID GUID.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Date that the client last completed the agreement.  This property is null if &#x60;agreementUrl&#x60; is not null and &#x60;status&#x60; is not  &#x60;agreed&#x60;.
        /// </summary>
        /// <value>Date that the client last completed the agreement.  This property is null if &#x60;agreementUrl&#x60; is not null and &#x60;status&#x60; is not  &#x60;agreed&#x60;.</value>
        [DataMember(Name="agreedOn", EmitDefaultValue=false)]
        public Object AgreedOn { get; set; }
        /// <summary>
        /// The agreement ID.
        /// </summary>
        /// <value>The agreement ID.</value>
        [DataMember(Name="agreementId", EmitDefaultValue=false)]
        public string AgreementId { get; set; }
        /// <summary>
        /// When not null, an agreement is required for user specified by  &#x60;clientUserId&#x60;.  When missing the user specified by &#x60;clientUserId&#x60; has already agreed and does not require a new acceptance.  Use this URL to render the agreement in a web page.  &lt;!- - or redirected to when providing redirect_url as a query parameter. - -&gt; 
        /// </summary>
        /// <value>When not null, an agreement is required for user specified by  &#x60;clientUserId&#x60;.  When missing the user specified by &#x60;clientUserId&#x60; has already agreed and does not require a new acceptance.  Use this URL to render the agreement in a web page.  &lt;!- - or redirected to when providing redirect_url as a query parameter. - -&gt; </value>
        [DataMember(Name="agreementUrl", EmitDefaultValue=false)]
        public string AgreementUrl { get; set; }
        /// <summary>
        /// The ID of the clickwrap.
        /// </summary>
        /// <value>The ID of the clickwrap.</value>
        [DataMember(Name="clickwrapId", EmitDefaultValue=false)]
        public string ClickwrapId { get; set; }
        /// <summary>
        /// A unique value that identifies a user.\\nYou can use anything that your system uses\\nto identify unique users, such as\\nemployee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.\\n\\nA clickwrap with a specific &#x60;clientUserId&#x60; will not appear again\\nonce it has been accepted.\\n\&quot;
        /// </summary>
        /// <value>A unique value that identifies a user.\\nYou can use anything that your system uses\\nto identify unique users, such as\\nemployee IDs, email addresses, and surrogate keys as the value of &#x60;clientUserId&#x60;.\\n\\nA clickwrap with a specific &#x60;clientUserId&#x60; will not appear again\\nonce it has been accepted.\\n\&quot;</value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// **True** if consumer disclosure was required by this agreement.
        /// </summary>
        /// <value>**True** if consumer disclosure was required by this agreement.</value>
        [DataMember(Name="consumerDisclosureEnabled", EmitDefaultValue=false)]
        public bool? ConsumerDisclosureEnabled { get; set; }
        /// <summary>
        /// The customer-branded HTML with the Electronic Record and Signature Disclosure information
        /// </summary>
        /// <value>The customer-branded HTML with the Electronic Record and Signature Disclosure information</value>
        [DataMember(Name="consumerDisclosureHtml", EmitDefaultValue=false)]
        public string ConsumerDisclosureHtml { get; set; }
        /// <summary>
        /// The date when the clickwrap was created. May be null.
        /// </summary>
        /// <value>The date when the clickwrap was created. May be null.</value>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public Object CreatedOn { get; set; }
        /// <summary>
        /// The list of all the data fields available for the clickwrap (custom fields and standard fields).
        /// </summary>
        /// <value>The list of all the data fields available for the clickwrap (custom fields and standard fields).</value>
        [DataMember(Name="dataFields", EmitDefaultValue=false)]
        public List<DataField> DataFields { get; set; }
        /// <summary>
        /// The date when the user declined the most recent required agreement.  This property is valid only when &#x60;status&#x60; is &#x60;declined&#x60;. Otherwise it is null.
        /// </summary>
        /// <value>The date when the user declined the most recent required agreement.  This property is valid only when &#x60;status&#x60; is &#x60;declined&#x60;. Otherwise it is null.</value>
        [DataMember(Name="declinedOn", EmitDefaultValue=false)]
        public Object DeclinedOn { get; set; }
        /// <summary>
        /// This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content 
        /// </summary>
        /// <value>This property specifies the data used to create a clickwrap with [dynamic content][].    [dynamic content]: /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content </value>
        [DataMember(Name="documentData", EmitDefaultValue=false)]
        public Dictionary<string, string> DocumentData { get; set; }
        /// <summary>
        /// An array of documents.
        /// </summary>
        /// <value>An array of documents.</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }
        /// <summary>
        /// A customer-defined string you can use in requests. This string will appear in the corresponding response.
        /// </summary>
        /// <value>A customer-defined string you can use in requests. This string will appear in the corresponding response.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// The URL redirected to after the agreement was completed.
        /// </summary>
        /// <value>The URL redirected to after the agreement was completed.</value>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }
        /// <summary>
        /// The display settings for this agreement.
        /// </summary>
        /// <value>The display settings for this agreement.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public DisplaySettings Settings { get; set; }
        /// <summary>
        /// User agreement status. One of:  - &#x60;created&#x60; - &#x60;agreed&#x60; - &#x60;declined&#x60;
        /// </summary>
        /// <value>User agreement status. One of:  - &#x60;created&#x60; - &#x60;agreed&#x60; - &#x60;declined&#x60;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public UserAgreementResponseStyle Style { get; set; }
        /// <summary>
        /// The human-readable semver version string.
        /// </summary>
        /// <value>The human-readable semver version string.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// The ID of the version.
        /// </summary>
        /// <value>The ID of the version.</value>
        [DataMember(Name="versionId", EmitDefaultValue=false)]
        public string VersionId { get; set; }
        /// <summary>
        /// Version of the clickwrap.
        /// </summary>
        /// <value>Version of the clickwrap.</value>
        [DataMember(Name="versionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAgreementResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AgreedOn: ").Append(AgreedOn).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  AgreementUrl: ").Append(AgreementUrl).Append("\n");
            sb.Append("  ClickwrapId: ").Append(ClickwrapId).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  ConsumerDisclosureEnabled: ").Append(ConsumerDisclosureEnabled).Append("\n");
            sb.Append("  ConsumerDisclosureHtml: ").Append(ConsumerDisclosureHtml).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DataFields: ").Append(DataFields).Append("\n");
            sb.Append("  DeclinedOn: ").Append(DeclinedOn).Append("\n");
            sb.Append("  DocumentData: ").Append(DocumentData).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAgreementResponse);
        }

        /// <summary>
        /// Returns true if UserAgreementResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAgreementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAgreementResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AgreedOn == other.AgreedOn ||
                    this.AgreedOn != null &&
                    this.AgreedOn.Equals(other.AgreedOn)
                ) && 
                (
                    this.AgreementId == other.AgreementId ||
                    this.AgreementId != null &&
                    this.AgreementId.Equals(other.AgreementId)
                ) && 
                (
                    this.AgreementUrl == other.AgreementUrl ||
                    this.AgreementUrl != null &&
                    this.AgreementUrl.Equals(other.AgreementUrl)
                ) && 
                (
                    this.ClickwrapId == other.ClickwrapId ||
                    this.ClickwrapId != null &&
                    this.ClickwrapId.Equals(other.ClickwrapId)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.ConsumerDisclosureEnabled == other.ConsumerDisclosureEnabled ||
                    this.ConsumerDisclosureEnabled != null &&
                    this.ConsumerDisclosureEnabled.Equals(other.ConsumerDisclosureEnabled)
                ) && 
                (
                    this.ConsumerDisclosureHtml == other.ConsumerDisclosureHtml ||
                    this.ConsumerDisclosureHtml != null &&
                    this.ConsumerDisclosureHtml.Equals(other.ConsumerDisclosureHtml)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.DataFields == other.DataFields ||
                    this.DataFields != null &&
                    this.DataFields.SequenceEqual(other.DataFields)
                ) && 
                (
                    this.DeclinedOn == other.DeclinedOn ||
                    this.DeclinedOn != null &&
                    this.DeclinedOn.Equals(other.DeclinedOn)
                ) && 
                (
                    this.DocumentData == other.DocumentData ||
                    this.DocumentData != null &&
                    this.DocumentData.SequenceEqual(other.DocumentData)
                ) && 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.ReturnUrl == other.ReturnUrl ||
                    this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(other.ReturnUrl)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.Equals(other.Settings)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.Equals(other.Style)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.VersionId == other.VersionId ||
                    this.VersionId != null &&
                    this.VersionId.Equals(other.VersionId)
                ) && 
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AgreedOn != null)
                    hash = hash * 59 + this.AgreedOn.GetHashCode();
                if (this.AgreementId != null)
                    hash = hash * 59 + this.AgreementId.GetHashCode();
                if (this.AgreementUrl != null)
                    hash = hash * 59 + this.AgreementUrl.GetHashCode();
                if (this.ClickwrapId != null)
                    hash = hash * 59 + this.ClickwrapId.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.ConsumerDisclosureEnabled != null)
                    hash = hash * 59 + this.ConsumerDisclosureEnabled.GetHashCode();
                if (this.ConsumerDisclosureHtml != null)
                    hash = hash * 59 + this.ConsumerDisclosureHtml.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.DataFields != null)
                    hash = hash * 59 + this.DataFields.GetHashCode();
                if (this.DeclinedOn != null)
                    hash = hash * 59 + this.DeclinedOn.GetHashCode();
                if (this.DocumentData != null)
                    hash = hash * 59 + this.DocumentData.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.ReturnUrl != null)
                    hash = hash * 59 + this.ReturnUrl.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.VersionId != null)
                    hash = hash * 59 + this.VersionId.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
